{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/CountryPicker/CountryPicker.jsx","components/Cards/Cards.jsx","components/Chart/Chart.jsx","App.js","index.js","App.module.css","components/CountryPicker/CountryPicker.module.css","components/Chart/Chart.module.css","images/Covid19_3.png"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchAPI","FormControl","className","styles","NativeSelect","defaultValue","onChange","e","target","value","style","backgroundColor","color","i","key","Cards","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","gutterBottom","variant","start","end","duration","separator","Date","toDateString","Chart","setDailyData","LineChart","length","labels","datasets","label","borderColor","fill","barchart","options","legend","display","title","text","App","state","fetchedData","setState","this","src","coronaImage","image","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d74c362f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2Ddhl\",\"card\":\"Cards_card__5GXQy\",\"infected\":\"Cards_infected__1Mt-M\",\"recovered\":\"Cards_recovered__1RfQM\",\"deaths\":\"Cards_deaths__33NLd\"};","import axios from 'axios'\r\n\r\nconst url= 'https://covid19.mathdro.id/api'\r\n\r\nexport const fetchData = async (country) => {\r\n\r\n    let changeableUrl = url;\r\n\r\n    if(country) {\r\n\r\n        changeableUrl= `${url}/countries/${country}`;\r\n\r\n    }\r\n    try{\r\n\r\n        //const response = await axios.get(url); \r\n        //console.log(response) check data in console with this code.\r\n        \r\n        const { data: { confirmed,recovered,deaths,lastUpdate} } = await axios.get(changeableUrl); //array destructring important!!!\r\n\r\n\r\n        return {confirmed, recovered, deaths, lastUpdate};\r\n\r\n    }\r\n\r\n        \r\n\r\n\r\n     catch(error){\r\n\r\n        console.log(error)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport const fetchDailyData= async () => {\r\n\r\n    try{\r\n    const {data} = await axios.get(`${url}/daily`);\r\n\r\n    //console.log(data);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n\r\n        confirmed: dailyData.confirmed.total,\r\n        deaths: dailyData.deaths.total,\r\n        date: dailyData.reportDate,\r\n     }))\r\n\r\n     return modifiedData;\r\n    } catch(error){\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const fetchCountries = async () =>{\r\n\r\n    try {\r\n\r\n        const {data: { countries }} = await axios.get(`${url}/countries`)\r\n\r\n       // console.log(response);\r\n\r\n       return countries.map((country) => country.name)\r\n\r\n\r\n\r\n    } catch(error){\r\n\r\n        console.log(error);\r\n\r\n    }\r\n\r\n\r\n\r\n}","import React, { useState, useEffect} from 'react';\r\n\r\nimport { NativeSelector, FormControl, NativeSelect} from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { countries, fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({handleCountryChange}) =>{\r\n\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([])\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchAPI = async () => {\r\n\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n\r\n    }, [setFetchedCountries] );\r\n\r\n    console.log(fetchedCountries)\r\n    return (\r\n\r\n        <FormControl className={styles.FormControl}>\r\n\r\n            \r\n            <h3> <u> Search By Country </u></h3>\r\n\r\n            <NativeSelect defaultValue=\"\" onChange= {(e) => handleCountryChange(e.target.value)} style={{backgroundColor:\"white\",\r\n\r\n                    \r\n                    \r\n                    \r\n                    \r\n                    }}>\r\n\r\n                \r\n\r\n                <option value=\"\" style={{backgroundColor:\"white\", color:\"black\"}}> Search Country...</option>\r\n\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n\r\n            </NativeSelect>\r\n            <br></br>\r\n\r\n\r\n        </FormControl>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\n\r\nimport { Card, CardContent , Typography, Grid} from '@material-ui/core';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nimport CountUP from 'react-countup' ;\r\n\r\nimport CountryPicker from '../CountryPicker/CountryPicker';\r\n\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({ data:{confirmed, recovered, deaths, lastUpdate}}) =>{\r\n\r\n    //console.log(confirmed);\r\n\r\n\r\n\r\n   // console.log(props);\r\n\r\n   if(!confirmed){\r\n\r\n\r\n        return 'Loading...';\r\n   }\r\n \r\n    \r\n\r\n    return (\r\n\r\n        <div className={styles.container}>\r\n\r\n            <Grid container spacing={3} justify=\"center\">\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card , styles.infected)}>\r\n\r\n                    <CardContent style={{backgroundColor:\"#ffd800\", }} >\r\n\r\n                        <Typography \r\n                        \r\n                         gutterBottom > <b> <h1>Infected </h1> </b></Typography>\r\n\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n\r\n                            <CountUP \r\n                            \r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            \r\n                            />\r\n\r\n\r\n                            {//important learn this countup thing also it needs to be imported}}\r\n                            }\r\n                        </Typography>\r\n\r\n                        <Typography  >{new Date(lastUpdate).toDateString()}</Typography>\r\n                        \r\n                        <Typography variant=\"body2\" >Number of active cases of Covid-19</Typography>\r\n\r\n\r\n\r\n                    </CardContent>\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card , styles.recovered)}>\r\n\r\n                    <CardContent style={{backgroundColor:\"#00CD00\", }}>\r\n\r\n                        <Typography  gutterBottom><b> <h1>Recovered </h1> </b></Typography>\r\n\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n\r\n                            <CountUP \r\n\r\n                            start={0}\r\n                            end={recovered.value}\r\n                            duration={2.5}\r\n                            separator=\",\"\r\n\r\n                            />\r\n\r\n\r\n                        {//important learn this countup thing also it needs to be imported}}\r\n                        }\r\n                        </Typography>\r\n\r\n                        \r\n                        <Typography  >{new Date(lastUpdate).toDateString()}</Typography>\r\n                        \r\n                        <Typography variant=\"body2\" >Number of recoveries from Covid-19</Typography>\r\n\r\n\r\n\r\n                    </CardContent>\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card , styles.deaths)}>\r\n\r\n                    <CardContent style={{backgroundColor:\"#FF0000\", }}>\r\n\r\n                        <Typography  gutterBottom><b> <h1>Deaths </h1> </b></Typography>\r\n\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n\r\n                            <CountUP \r\n\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n\r\n                            />\r\n\r\n\r\n                            {//important learn this countup thing also it needs to be imported}}\r\n                            }\r\n                        </Typography>\r\n\r\n                        \r\n                        <Typography  >{new Date(lastUpdate).toDateString()}</Typography>\r\n                        \r\n                        <Typography variant=\"body2\" >Number of deaths caused by Covid-19</Typography>\r\n\r\n\r\n\r\n                    </CardContent>\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Cards;","import React, { useState, useEffect} from 'react'\r\n\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport {Line , Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart = ({ data:{ confirmed, deaths, recovered}, country}) =>{\r\n\r\n    const [ dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchAPI= async () => {\r\n\r\n           setDailyData(await fetchDailyData());\r\n\r\n        }\r\n\r\n        //console.log(dailyData)\r\n\r\n        fetchAPI();\r\n\r\n    }, []);\r\n\r\n    const LineChart = (\r\n\r\n        dailyData.length ? (<Line data={{ labels: dailyData.map(({date}) => date),\r\n    datasets: [{\r\n\r\n        data: dailyData.map(({ confirmed}) => confirmed),\r\n        label: 'Infected',\r\n        borderColor: '#3333ff',\r\n        fill: true,\r\n    }, {\r\n        \r\n        data: dailyData.map(({ deaths}) => deaths),\r\n        label: 'Deaths',\r\n        borderColor: 'red',\r\n        backgroundColor: 'rgba(255,0,0,.5)',\r\n        fill: true,\r\n\r\n\r\n    }],\r\n}}\r\n/>) : null\r\n        \r\n\r\n\r\n    );\r\n\r\n    const barchart = (\r\n\r\n        confirmed ? (\r\n\r\n            <Bar \r\n                data={{\r\n\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets:[{\r\n\r\n                        label:'people',\r\n                        backgroundColor: [\r\n\r\n                            'rgba(0,0,255,.5)',\r\n                            'rgba(0,255,0,.5)',\r\n                            'rgba(255,0,0,.5)',\r\n\r\n                        ],\r\n                        data:[confirmed.value, recovered.value,  deaths.value]\r\n\r\n                    }]\r\n\r\n                }}\r\n\r\n                options={{\r\n\r\n                    legend: {display: false},\r\n                    title: { display: true, text: `Current state in ${country}`}\r\n\r\n                }}\r\n            \r\n            \r\n            \r\n            />\r\n\r\n        ) : null\r\n\r\n    )\r\n    \r\n\r\n    return (\r\n\r\n        <div className={styles.container}>\r\n\r\n            { country ? barchart: LineChart}\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\n\r\nimport {Cards, CountryPicker, Chart} from './components';\r\n\r\nimport styles from './App.module.css';\r\n\r\nimport { fetchData} from './api';\r\n\r\nimport coronaImage from './images/Covid19_3.png'\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n    state ={\r\n\r\n        data: {} ,\r\n\r\n        country:'',\r\n\r\n    }\r\n \r\n\r\n    async componentDidMount(){\r\n\r\n\r\n        const fetchedData = await fetchData();\r\n\r\n        this.setState({ data: fetchedData});\r\n\r\n       // console.log(data);\r\n\r\n    \r\n\r\n    }\r\n\r\n    handleCountryChange = async (country) =>{\r\n\r\n        const fetchedData = await fetchData(country);\r\n\r\n        this.setState({data: fetchedData, country: country});\r\n\r\n      //  console.log(fetchedData);\r\n\r\n       // console.log(country);\r\n\r\n    }\r\n   \r\n\r\n    render(){\r\n\r\n\r\n        const {data, country} = this.state;\r\n        return (\r\n\r\n            <div className={styles.container}>\r\n\r\n                \r\n                <img src={coronaImage} className={styles.image} alt='COVID-19' />\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <h2><u>Current Stats</u></h2>\r\n\r\n               \r\n\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                <Chart data={data} country={country} />\r\n\r\n            </div>\r\n\r\n        )\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default App;","import React from  'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render( <App/> , document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2hIgc\",\"image\":\"App_image__2OywS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2k9lr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3BT3m\"};","module.exports = __webpack_public_path__ + \"static/media/Covid19_3.d7265326.png\";"],"sourceRoot":""}